alias currentPID S0;
currentPID = (PTBR-12800)/10;
alias currentPCB S1;
currentPCB = READY_LIST+32*currentPID;
[ currentPCB + 1 ] = 1;
[ currentPCB + 2 ] = BP;
[ currentPCB + 3 ] = SP - 1;
alias physicalSP S2;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[ currentPCB + 4 ] = [ physicalSP ];
[ currentPCB + 5 ] = PTBR;
[ currentPCB + 6 ] = PTLR;
[ currentPCB + 7 ] = R0;
[ currentPCB + 8 ] = R1;
[ currentPCB + 9 ] = R2;
[ currentPCB + 10 ] = R3;
[ currentPCB + 11 ] = R4;
[ currentPCB + 12 ] = R5;
[ currentPCB + 13 ] = R6;
[ currentPCB + 14 ] = R7;
alias iterPID S3;
alias iterPCB S4;
iterPID=(currentPID+1)%32;
iterPCB=READY_LIST + 32*iterPID;
while(iterPID!=currentPID) do
	if([iterPCB + 1] == 1) then
		break;
	endif;
	iterPID=(iterPID+1)%32;
	iterPCB=READY_LIST + 32*iterPID;
endwhile;
[iterPCB + 1]=2;
BP=[iterPCB + 2];
SP=[iterPCB + 3];
PTBR = [iterPCB + 5];
PTLR = [iterPCB + 6];
R0 = [iterPCB + 7];
R1 = [iterPCB + 8];
R2 = [iterPCB + 9];
R3 = [iterPCB + 10];
R4 = [iterPCB + 11];
R5 = [iterPCB + 12];
R6 = [iterPCB + 13];
R7 = [iterPCB + 14];
SP = SP + 1;
alias newphysicalSP S2;
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[ newphysicalSP ] = [ iterPCB + 4 ];
ireturn;