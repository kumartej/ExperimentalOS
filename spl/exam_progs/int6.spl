print("INT6");
alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
alias sysCallNo S1;
sysCallNo = [physicalSP -1];

if(sysCallNo == 9) then
	alias arg1 S2;
	alias i S3;
	alias base S4;
	alias exebl S5;
	alias curbl S6;
	alias diff S7;
	alias temp S8;
	arg1 = [physicalSP - 3];
	i=0;
	while(i<64) do
		if([FAT+i*8]==arg1) then
			break;
		endif;
		i=i+1;
	endwhile;
	if(i==64) then
		print("NOFILE");
		[physicalSP-2]=-1;
		ireturn;
	endif;
	base = [FAT+i*8+2];
	load(1,base);

	i=0;
	exebl=0;
	curbl=0;
	while(i<256) do
		if([SCRATCHPAD+i]!=-1 && [SCRATCHPAD+i]!="") then
			exebl=exebl+1;
		endif;
		i=i+1;
	endwhile;
	if(exebl>4) then
		print("MORECODE");
		[physicalSP-2]=-1;
		ireturn;
	endif;

	i=0;
	curbl=0;
	while(i<4) do
		if([PTBR+i*2+1]=="01" || [PTBR+i*2+1]=="11") then
			curbl=[PTBR+i*2];
			[MEM_LIST+curbl]=[MEM_LIST+curbl]-1;
		else
			if([PTBR+i*2]>447) then
				curbl=[PTBR+i*2];
				[DISK_LIST+curbl]=[DISK_LIST+curbl]-1;
				store(6,20);
			endif;
		endif;
		[PTBR+i*2]=-1;
		[PTBR+i*2+1]="00";
		i=i+1;
	endwhile;

	i=0;
	while(i<exebl) do
		if([SCRATCHPAD+i]!=-1 && [SCRATCHPAD+i]!="") then
			[PTBR+i*2]=[SCRATCHPAD+i];
			[PTBR+i*2+1]="00";
		endif;
		i=i+1;
	endwhile;
	[PTBR+9]="01";
	i=15;
	alias ppid S7;
	alias pPCB S8;
	alias widentry S9;
	alias tmp S10;
	ppid=(PTBR-12800)/10;
	pPCB=READY_LIST+ppid*32;
	while(i<30) do
		if([pPCB+i]!=-1) then
			widentry=[pPCB+i];
			if(widentry!=-1) then
				tmp=[FILE_TABLE+widentry*2+1];
				[FILE_TABLE+widentry*2+1]=tmp-1;
				[pPCB+i]=-1;
				[pPCB+i]=0;
				if(tmp==0) then
					[FILE_TABLE+widentry*2]=-1;
				endif;
			endif;
		endif;
		i=i+2;
	endwhile;
	SP=4*512;
	tmp=[PTBR+8];
	[tmp*512]=0;
//	print("AFTERINT6");
	breakpoint;
	ireturn;
endif;

if(sysCallNo==11) then
	alias pid S2;
	pid = (PTBR-12800)/10;
	[physicalSP-2]=pid;
	ireturn;
endif;

if(sysCallNo==12) then
	alias pid S2;
	alias ppid S3;
	pid = (PTBR-12800)/10;
	ppid = [READY_LIST+pid*32+31];
	[physicalSP-2]=ppid;
	ireturn;
endif;